import{U as h,V as o}from"./vendor-b3a12ac3.js";import{d as r,V as c}from"./Variety-ab1a983c.js";class d{constructor(e,i,t,s){this.id=`f_${h()}`,this.name=e,this.geojson=i,this.area=t,this.center=s,this.numPlants=0}save(){if(!this.name)throw"name is required";if(!this.geojson)throw"geojson is required";if(!this.area)throw"area is required";if(!this.center)throw"center is required";return r.fields.put(this)}static async getAll(){return await r.fields.toArray()||[]}static get(e){return r.fields.get({id:e})}async getVariety(){return console.log(this.varietyId),this.varietyId?c.get(this.varietyId):void 0}}r.fields.mapToClass(d);class a{constructor(e,i,t=[],s=[],n=[]){this.id=`w_${h()}`,this.coord=e,this.year=i,this.maxTemp=t,this.minTemp=s,this.precipitation=n}save(){if(!this.coord)throw"coord is required";if(!this.year)throw"year is required";return r.weather.put(this)}static async get(e,i){let t=await r.weather.get({coord:e,year:i});return t||(t=new a(e,i)),t}static async getAll(e){const i=new Map;return await r.weather.where("[coord+year]").between([e,o.minKey],[e,o.maxKey]).each(t=>i.set(t.year,t)),i}}r.weather.mapToClass(a);export{d as F,a as W};
